import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import index.test from './index.test';

**1. Unit Tests:**

**1. Valid Test Cases:**


import { sum3Numbers } from './index';

describe('sum3Numbers Valid Tests', () => {
  it('should sum three positive numbers correctly', () => {
    expect(sum3Numbers(1, 2, 3)).toBe(6);
  });

  it('should sum three zeros correctly', () => {
    expect(sum3Numbers(0, 0, 0)).toBe(0);
  });

  it('should sum three negative numbers correctly', () => {
    expect(sum3Numbers(-1, -2, -3)).toBe(-6);
  });
});


**2. Edge Case Test Cases:**


import { sum3Numbers } from './index';

describe('sum3Numbers Edge Case Tests', () => {
  it('should return NaN when summing a number and an undefined value', () => {
    expect(sum3Numbers(1, undefined, 3)).toBe(NaN);
  });

  it('should return Infinity when summing a number and Infinity', () => {
    expect(sum3Numbers(Infinity, 2, 3)).toBe(Infinity);
  });

  it('should return NaN when summing a number and NaN', () => {
    expect(sum3Numbers(NaN, 2, 3)).toBe(NaN);
  });
});


**3. Invalid Test Cases:**


import { sum3Numbers } from './index';

describe('sum3Numbers Invalid Tests', () => {
  it('should throw an error when attempting to sum a string and numbers', () => {
    expect(() => sum3Numbers('1', 2, 3)).toThrow();
  });

  it('should throw an error when attempting to sum a number and a string', () => {
    expect(() => sum3Numbers(1, '2', 3)).toThrow();
  });

  it('should throw an error when attempting to sum a number and a string', () => {
    expect(() => sum3Numbers(1, 2, '3')).toThrow();
  });
});


**2. React Tests:**

**1. Component Test:**


import App from './App';

test('renders learn react link', () => {
  const { getByText } = render(<App />);
  const linkElement = getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


**2. Functional Test:**


import App from './App';

test('button click increments counter', () => {
  const { getByText } = render(<App />);
  const button = getByText(/increment/i);
  fireEvent.click(button);
  const counter = getByText(/Count: 1/i);
  expect(counter).toBeInTheDocument();
});
