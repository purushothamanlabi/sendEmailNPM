import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import index.test from './index.test';

### Unit Test Cases:

**Test Case 1: Valid Input (Positive Numbers)**

- Arrange:
  - `a = 3`
  - `b = 5`
  - `c = 7`
- Act:
  - Call `sum3Numbers(a, b, c)`
- Assert:
  - Expect the sum to be 15

**Test Case 2: Valid Input (Negative Numbers)**

- Arrange:
  - `a = -3`
  - `b = -5`
  - `c = -7`
- Act:
  - Call `sum3Numbers(a, b, c)`
- Assert:
  - Expect the sum to be -15

**Test Case 3: Valid Input (Floating Point Numbers)**

- Arrange:
  - `a = 3.5`
  - `b = 5.5`
  - `c = 7.2`
- Act:
  - Call `sum3Numbers(a, b, c)`
- Assert:
  - Expect the sum to be 16.2

**Test Case 4: Invalid Input (Non-Numeric Characters)**

- Arrange:
  - `a = NaN`
  - `b = "5"`
  - `c = "seven"`
- Act:
  - Call `sum3Numbers(a, b, c)`
- Assert:
  - Expect an error to be thrown

**Test Case 5: Boundary Values**

- Arrange:
  - `a = Number.MAX_VALUE`
  - `b = Number.MAX_VALUE`
  - `c = Number.MAX_VALUE`
- Act:
  - Call `sum3Numbers(a, b, c)`
- Assert:
  - Expect the sum to be positive infinity

**Integration Test Cases:

**Test Case 6: Consumption by Other Modules**

- Arrange:
  - Create a separate module that imports `sum3Numbers()`
- Act:
  - Use `sum3Numbers()` to calculate a sum within the module
- Assert:
  - Verify that the module correctly calculates the sum and performs its intended functionality

**Regression Test Cases:

**Test Case 7: Refactoring (Changing Implementation)**

- Arrange:
  - Refactor `sum3Numbers()` while maintaining its specifications
- Act:
  - Re-run previously passed test cases
- Assert:
  - Verify that the function continues to perform as expected with the updated implementation
