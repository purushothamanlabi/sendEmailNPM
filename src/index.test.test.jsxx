import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import index.test from './index.test';

**Unit Tests:**

**1. Positive Inputs:**

- **a. Verify the sum of three positive numbers:**
  - Test Code:
    
    it('should sum three positive numbers', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '1' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '2' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '3' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('6')).toBeInTheDocument();
    });
    

- **b. Verify the sum of a zero and two positive numbers:**
  - Test Code:
    
    it('should sum a zero and two positive numbers', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '0' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '2' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '3' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('5')).toBeInTheDocument();
    });
    

- **c. Verify the sum of three large numbers:**
  - Test Code:
    
    it('should sum three large numbers', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '1000000' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '2000000' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '3000000' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('6000000')).toBeInTheDocument();
    });
    

**2. Negative Inputs:**

- **a. Verify the sum of three negative numbers:**
  - Test Code:
    
    it('should sum three negative numbers', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '-1' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '-2' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '-3' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('-6')).toBeInTheDocument();
    });
    

- **b. Verify the sum of a negative number and two positive numbers:**
  - Test Code:
    
    it('should sum a negative number and two positive numbers', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '-1' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '2' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '3' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('4')).toBeInTheDocument();
    });
    

- **c. Verify the sum of three large negative numbers:**
  - Test Code:
    
    it('should sum three large negative numbers', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '-1000000' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '-2000000' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '-3000000' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('-6000000')).toBeInTheDocument();
    });
    

**3. Edge Cases:**

- **a. Verify the sum of three zeros:**
  - Test Code:
    
    it('should sum three zeros', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '0' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '0' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '0' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('0')).toBeInTheDocument();
    });
    

- **b. Verify the sum of one positive and two negative numbers:**
  - Test Code:
    
    it('should sum one positive and two negative numbers', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '1' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '-2' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '-3' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('-4')).toBeInTheDocument();
    });
    

- **c. Verify the sum of two positive and one negative number:**
  - Test Code:
    
    it('should sum two positive and one negative number', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: '2' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: '-3' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: '1' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryByText('0')).toBeInTheDocument();
    });
    

**4. Invalid Inputs:**

- **a. Verify an error is thrown for non-numeric inputs:**
  - Test Code:
    
    it('should throw error for non-numeric inputs', () => {
      const { result } = render(<index />);
      fireEvent.change(screen.getByRole('input', { name: 'num1' }), { target: { value: 'a' } });
      fireEvent.change(screen.getByRole('input', { name: 'num2' }), { target: { value: 'b' } });
      fireEvent.change(screen.getByRole('input', { name: 'num3' }), { target: { value: 'c' } });
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
      expect(result.queryAllByText(/invalid/i)).toHaveLength(3);
    });
    

- **b. Verify an error is thrown for undefined inputs:**
  - Test Code:
    
    it('should throw error for undefined inputs', () => {
      const { result } = render(<index />);
      fireEvent.click(screen.getByRole('button', { name: 'sum-button' }));
